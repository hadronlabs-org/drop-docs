"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={},s="Liquidity Staking Module",i={unversionedId:"integrations/lsm_staking",id:"integrations/lsm_staking",title:"Liquidity Staking Module",description:"At the moment of writing, the LSM is only available on Cosmos Hub.",source:"@site/docs/integrations/lsm_staking.md",sourceDirName:"integrations",slug:"/integrations/lsm_staking",permalink:"/integrations/lsm_staking",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Referral Program",permalink:"/integrations/referral"},next:{title:"Overview",permalink:"/validators/overview"}},l={},d=[{value:"Tokenized share creation",id:"tokenized-share-creation",level:2},{value:"Drop LSM staking restrictions",id:"drop-lsm-staking-restrictions",level:2},{value:"IBC transfer and staking LSM share with Drop",id:"ibc-transfer-and-staking-lsm-share-with-drop",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"liquidity-staking-module"},"Liquidity Staking Module"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"At the moment of writing, the LSM is only available on Cosmos Hub.")),(0,r.kt)("p",null,"Liquidity Staking Module (LSM) allows users to transfer their staked assets from one address to another without unstaking them and waiting the entire unbonding period.\nTo learn more about it, visit the repository: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iqlusioninc/liquidity-staking-module"},"https://github.com/iqlusioninc/liquidity-staking-module"),"."),(0,r.kt)("p",null,'To achieve that, the LSM mints special tokens that represent staked asset ownership.\nOne can "tokenize" their staked assets, and by sending them, transfer ownership to another user or protocol.\nThese tokens are called ',(0,r.kt)("em",{parentName:"p"},"LSM shares")," below for simplicity."),(0,r.kt)("p",null,"Each LSM share is represented by a unique denom.\nThis means that one can send a partial share to someone but two different shares aren't fungible with each other."),(0,r.kt)("p",null,"Drop can accept such shares and mint dAssets based on them (i.e., if one has traditionally staked tokens delegated to a validator, they can tokenize their shares via the LSM, IBC transfer them to Neutron, and liquid stake with Drop to receive dAssets).\nUnder the hood, this means that the ownership of those staked assets is transferred to Drop Protocol and the user gets their respective amount of dAssets in exchange."),(0,r.kt)("h2",{id:"tokenized-share-creation"},"Tokenized share creation"),(0,r.kt)("p",null,"The first action described here is a general tokenized creation. An example of the message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@type": "/cosmos.staking.v1beta1.MsgTokenizeShares",\n  "delegator_address": "cosmos_delegator_address",\n  "validator_address": "cosmosvaloper_validator_address",\n  "amount": {\n    "denom": "denom",\n    "amount": "1234"\n  },\n  "tokenized_share_owner": "cosmos_tokenized_share_owner"\n}\n')),(0,r.kt)("p",null,"Where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cosmos_delegator_address")," is an address of the user that currently has staked assets"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validator_address")," is the address of the validator the user\u2019s assets are delegated to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenized_share_owner")," is the address which will be getting rewards.\nRegardless of the current owner of tokenized share tokens, the rewards will be distributed to the address specified here.")),(0,r.kt)("p",null,"In order to reveal how many tokens a user has staked, use ",(0,r.kt)("a",{parentName:"p",href:"https://cosmos-lcd.quickapi.com/swagger/#/Query/DelegatorDelegations"},"this")," query."),(0,r.kt)("p",null,"Once the operation above is performed, a new denom is created and the user gets new minted tokens that represent staked tokens.\nThe denom has the following structure: ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmosvaloper1**************************************/123"),", so it consists of the validator address and an index of this LSM share. "),(0,r.kt)("h2",{id:"drop-lsm-staking-restrictions"},"Drop LSM staking restrictions"),(0,r.kt)("p",null,"That tokenized share can be staked with Drop only if it was produced by validatator from the Drop ",(0,r.kt)("em",{parentName:"p"},"validator list"),".\nTo get this list you need to do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Query ",(0,r.kt)("inlineCode",{parentName:"p"},"core")," contract config:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "config": {}\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Get validator set contract from the result via ".validators_set_contract" field')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Query validators from validator set contract with the following query:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "validators": {}\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The example of a result:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "valoper_address": "cosmosvaloper1gh4vzw9wsfgl2h37qqnetet0m4wrzm7v7x3j9x",\n      "weight": 10,\n      "last_processed_remote_height": null,\n      "last_processed_local_height": null,\n      "last_validated_height": null,\n      "last_commission_in_range": null,\n      "uptime": "0",\n      "tombstone": false,\n      "jailed_number": null,\n      "init_proposal": null,\n      "total_passed_proposals": 0,\n      "total_voted_proposals": 0\n    },\n    {\n      "valoper_address": "cosmosvaloper1rndyjagfg0nsedl2uy5n92vssn8aj5n67t0nfx",\n      "weight": 10,\n      "last_processed_remote_height": null,\n      "last_processed_local_height": null,\n      "last_validated_height": null,\n      "last_commission_in_range": null,\n      "uptime": "0",\n      "tombstone": false,\n      "jailed_number": null,\n      "init_proposal": null,\n      "total_passed_proposals": 0,\n      "total_voted_proposals": 0\n    }\n  ]\n}\n')))),(0,r.kt)("h2",{id:"ibc-transfer-and-staking-lsm-share-with-drop"},"IBC transfer and staking LSM share with Drop"),(0,r.kt)("p",null,"After one created a tokenized share on Cosmos Hub, it can be staked with Drop.\nAs well as with ATOM, transfer and stake can be done in one transaction (thankfully to IBC hooks):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "cosmos-sdk/MsgTransfer",\n  "value": {\n    "memo": "{\\"wasm\\":{\\"contract\\":\\"neutron1_core_contract\\",\\"msg\\":{\\"bond\\":{}}}}",\n    "receiver": "neutron1_core_contract",\n    "sender": "cosmos1_sender",\n    "source_channel": "channel-123",\n    "source_port": "transfer",\n    "timeout_height": "0",\n    "timeout_timestamp": "12345678901234567890",\n    "token": {\n      "amount": "1234",\n      "denom": "cosmosvaloper1**************************************/123"\n    }\n  }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Unfortunately, due to the nature of LSM shares, one cannot do LSM share creation, transfer and staking with Drop in one transaction.\nThe reason of it is that for the second part (transfer/stake) we need a denom of the LSM share.\nThis denom contains the unique index of the LSM share that cannot be predicted.\nThus, to convert native staking to liquid staking, we need at least 2 transactions.")),(0,r.kt)("p",null,"Where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"source_channel"),' is the Cosmos Hub-Neutron channel (you can use "relayers" ',(0,r.kt)("a",{parentName:"li",href:"https://www.mintscan.io/cosmos/relayers"},"page")," on Mintscan to get it)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout_timestamp")," is an IBC timeout. You can use 10 minutes by default and the following JavaScript snippet to calculate it:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Math.floor(Date.now() / 1000) * 1e9 + 10 * 60 * 1e9;\n")))),(0,r.kt)("p",null,"Alternatively, one can split the operations in two.\nIn this case, it will be regular IBC transfer for the LSM share, and regular staking with Drop.\nLSM share staking process is the very same as ",(0,r.kt)("a",{parentName:"p",href:"overview#staking"},"ASSET staking"),", but the coin attached to the message is an LSM share IBC-transferred to Neutron."))}u.isMDXComponent=!0}}]);