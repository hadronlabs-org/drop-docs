"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[46],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="Drop integration",i={unversionedId:"integrations/overview",id:"integrations/overview",title:"Drop integration",description:"Drop protocol can be integrated into external UI or DeFi on Neutron or any other IBC-connected chain. This page describes possible approaches of doing that.",source:"@site/docs/integrations/overview.md",sourceDirName:"integrations",slug:"/integrations/overview",permalink:"/integrations/overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/"},next:{title:"Referral program integration",permalink:"/integrations/referral"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Using TypeScript clients",id:"using-typescript-clients",level:3},{value:"Crafting messages manually",id:"crafting-messages-manually",level:3},{value:"Staking ATOM from Cosmos Hub",id:"staking-atom-from-cosmos-hub",level:4},{value:"Staking ATOM from Osmosis",id:"staking-atom-from-osmosis",level:4},{value:"Direct usage via SkipAPI",id:"direct-usage-via-skipapi",level:3},{value:"Queries",id:"queries",level:2},{value:"Instance contracts discovery",id:"instance-contracts-discovery",level:3},{value:"dASSET denom",id:"dasset-denom",level:3},{value:"dASSET balance",id:"dasset-balance",level:3},{value:"Exchange rate",id:"exchange-rate",level:3},{value:"Withdrawal NFT info",id:"withdrawal-nft-info",level:3},{value:"Actions",id:"actions",level:2},{value:"Staking",id:"staking",level:3},{value:"Unstaking request",id:"unstaking-request",level:3},{value:"Withdrawal",id:"withdrawal",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"drop-integration"},"Drop integration"),(0,r.kt)("p",null,"Drop protocol can be integrated into external UI or DeFi on Neutron or any other IBC-connected chain. This page describes possible approaches of doing that."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"It is possible to integrate the Drop protocol in several ways:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use the auto-generated TypeScript client for smart contracts to interact with the Drop protocol."),(0,r.kt)("li",{parentName:"ol"},"Craft the Drop messages manually and send them to Neutron chain or other supported chains to stake from it using the ibc-hooks or Skip API."),(0,r.kt)("li",{parentName:"ol"},"(WIP) Use the Drop protocol through the Skip API.")),(0,r.kt)("p",null,"Integration with Drop generally consists of 3 actions and several queries."),(0,r.kt)("p",null,"Actions are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"staking"),(0,r.kt)("li",{parentName:"ul"},"unstaking request"),(0,r.kt)("li",{parentName:"ul"},"unstaking withdrawal")),(0,r.kt)("p",null,"Queries are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"instance contracts discovery"),(0,r.kt)("li",{parentName:"ul"},"dASSET denom"),(0,r.kt)("li",{parentName:"ul"},"dASSET balance"),(0,r.kt)("li",{parentName:"ul"},"exchange rate"),(0,r.kt)("li",{parentName:"ul"},"unstacking request status")),(0,r.kt)("h3",{id:"using-typescript-clients"},"Using TypeScript clients"),(0,r.kt)("p",null,"In case if one is interested in direct interaction with contracts on Neutron chain, you can use the generated TypeScript clients for smart contracts.\nThey allow to make staking and unstaking with the assets that are already on the Neutron chain."),(0,r.kt)("p",null,"All contract methods are covered in autogenerated code using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/neutron-org/contracts2ts"},"https://github.com/neutron-org/contracts2ts")," tool. You can find examples of generated code in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hadronlabs-org/drop-contracts/tree/main/integration_tests/src/generated/contractLib"},"https://github.com/hadronlabs-org/drop-contracts/tree/main/integration_tests/src/generated/contractLib")," repo."),(0,r.kt)("p",null,"This code is generated using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hadronlabs-org/drop-contracts/blob/main/integration_tests/src/rebuild-client.ts"},"https://github.com/hadronlabs-org/drop-contracts/blob/main/integration_tests/src/rebuild-client.ts")," configuration."),(0,r.kt)("h3",{id:"crafting-messages-manually"},"Crafting messages manually"),(0,r.kt)("p",null,"Use the messages templates provided in this doc to send them directly to the contracts.\nThis is especially useful in the case of issuing a transaction from another chain.\nFor example, ATOM staking can be done in a single IBC-transfer that calls Drop contract via ",(0,r.kt)("a",{parentName:"p",href:"https://docs.neutron.org/neutron/modules/3rdparty/osmosis/ibc-hooks/overview"},"ibc-hooks module on Neutron"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It must be noted that the approach described here results in dASSET minting on Neutron.\nIt means that after staking with Drop, the user have to do the next action with LST from Neutron chain.")),(0,r.kt)("p",null,"To simplify the work one still can use SkipAPI. The process is as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api-docs.skip.money/reference/getassets"},"https://api-docs.skip.money/reference/getassets")," endpoint allows getting proper denom of a specific asset on a specific chain"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api-docs.skip.money/reference/getroutev2"},"https://api-docs.skip.money/reference/getroutev2")," endpoint allows building a proper route to transfer an asset to Neutron"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api-docs.skip.money/reference/getmsgsv2"},"https://api-docs.skip.money/reference/getmsgsv2")," endpoint allows building a message to be issued on the target chain to stake assets with Drop. To do that, one should specify the contract address and message needed in the ",(0,r.kt)("inlineCode",{parentName:"li"},"post_route_handler")," section (",(0,r.kt)("inlineCode",{parentName:"li"},"COSMWASMCONTRACTMSGWRAPPER"),").")),(0,r.kt)("p",null,"Here are the examples for staking transactions:"),(0,r.kt)("h4",{id:"staking-atom-from-cosmos-hub"},"Staking ATOM from Cosmos Hub"),(0,r.kt)("p",null,"Cosmos Hub transaction message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "cosmos-sdk/MsgTransfer",\n  "value": {\n    "memo": "{\\"wasm\\":{\\"contract\\":\\"neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu\\",\\"msg\\":{\\"bond\\":{\\"receiver\\":\\"neutron1vlw72wh7rvl2vg4w434a6h9mftsl5vfqzntwdh\\"}}}}",\n    "receiver": "neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu",\n    "sender": "cosmos1vlw72wh7rvl2vg4w434a6h9mftsl5vfqxvzvhs",\n    "source_channel": "channel-569",\n    "source_port": "transfer",\n    "timeout_height": {},\n    "timeout_timestamp": "1715100002194956544",\n    "token": {\n      "amount": "200000",\n      "denom": "uatom"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Cosmos Hub transaction memo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "wasm": {\n    "contract": "neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu",\n    "msg": {\n      "bond": {\n        "receiver": "neutron1vlw72wh7rvl2vg4w434a6h9mftsl5vfqzntwdh"\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"staking-atom-from-osmosis"},"Staking ATOM from Osmosis"),(0,r.kt)("p",null,"Osmosis transaction message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "cosmos-sdk/MsgTransfer",\n  "value": {\n    "memo": "{\\"forward\\":{\\"channel\\":\\"channel-569\\",\\"next\\":{\\"wasm\\":{\\"contract\\":\\"neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu\\",\\"msg\\":{\\"bond\\":{\\"receiver\\":\\"neutron1vlw72wh7rvl2vg4w434a6h9mftsl5vfqzntwdh\\"}}}},\\"port\\":\\"transfer\\",\\"receiver\\":\\"neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu\\",\\"retries\\":2,\\"timeout\\":1715100123336401403}}",\n    "receiver": "cosmos1vlw72wh7rvl2vg4w434a6h9mftsl5vfqxvzvhs",\n    "sender": "osmo1vlw72wh7rvl2vg4w434a6h9mftsl5vfqwh3upz",\n    "source_channel": "channel-0",\n    "source_port": "transfer",\n    "timeout_height": {},\n    "timeout_timestamp": "1715100123336399360",\n    "token": {\n      "amount": "99300",\n      "denom": "ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Osmosis transaction memo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "forward": {\n    "channel": "channel-569",\n    "next": {\n      "wasm": {\n        "contract": "neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu",\n        "msg": {\n          "bond": {\n            "receiver": "neutron1vlw72wh7rvl2vg4w434a6h9mftsl5vfqzntwdh"\n          }\n        }\n      }\n    },\n    "port": "transfer",\n    "receiver": "neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu",\n    "retries": 2,\n    "timeout": 1715100123336401400\n  }\n}\n')),(0,r.kt)("p",null,"As you can see, staking from Osmosis besides ",(0,r.kt)("inlineCode",{parentName:"p"},"ibc-hook")," module requires using of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cosmos/ibc-apps/tree/main/middleware/packet-forward-middleware"},"pfm"),", because ATOM should be transferred to Cosmos Hub first and only after that to Neutron."),(0,r.kt)("h3",{id:"direct-usage-via-skipapi"},"Direct usage via SkipAPI"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"SkipAPI integration is work in progress yet and will be available shortly after the launch")),(0,r.kt)("p",null,"Instead of manually guiding SkipAPI on how to handle the ASSET (e.g., send to Neutron and stake), simply specify the desired result and let SkipAPI decide on the proper way to convert the assets. This approach is flexible but might have the potential caveat of the dASSET being bought on a DEX instead of being staked."),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("h3",{id:"instance-contracts-discovery"},"Instance contracts discovery"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"factory")," contract returns all the other smart contract for a specific instance with the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "state": {}\n}\n')),(0,r.kt)("p",null,"Query result example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "core_contract": "neutron1elxhch2kul3qk2whxawtfwe0l2ma0snec3fe6j4zp2wftwrhs33q2yzqwy",\n  "distribution_contract": "neutron1jnre6ef6mlcyfqsu8e9a2wf27farphsrgezlv0n8ezl9vfzdc7vqkmtvpm",\n  "puppeteer_contract": "neutron1zvk70rw9xk5nvkw3c8ms62n5v9t6zpayfkygn8m5pgwyrqzsjsaq2upegw",\n  "rewards_manager_contract": "neutron1t0spq2jeef7jvvydlaz4jxga37skrnqk0uuxa5d7nqcrjtnk79lsnfygj3",\n  "staker_contract": "neutron1qcz9uw5g3vwqmz7qcsmcua3vzps6amrsqrmf7r84xfe76g3ztsrqm82sfy",\n  "strategy_contract": "neutron1sjeppcavzvect0e5654tl4w06pp9sdx2pmxqy8m4jwv58jlwwv8quv86yy",\n  "token_contract": "neutron1wgtjgeprg53wthczzlzpg0vrytuvfl9j59lpf87qd3mtj2dq6xysxvwcxd",\n  "validators_set_contract": "neutron1sq87ct42mza6sjpj9qgkfk3ngyaqc03ykf78z3e5hez68zfs4a5qyxl5pg",\n  "withdrawal_manager_contract": "neutron1tgw3d229d93rhk3hv68ff7f8zjs9lgk9lv9pkvp8fmt46ja47u0s02xxhg",\n  "withdrawal_voucher_contract": "neutron1hvr35t4s0r9nrt4taujyu704r4wfynp4ed5dz32pa7xcwzgwr9vs7vu4gy"\n}\n')),(0,r.kt)("p",null,"Getting contracts with the TS client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const wallet = await DirectSecp256k1HdWallet.fromMnemonic(\n    "Mnemonic",\n    {\n        prefix: \'neutron\',\n    },\n);\nconst client = await SigningCosmWasmClient.connectWithSigner(\n    "https://rpc-palvus.pion-1.ntrn.tech:443",\n    wallet,\n    {\n        gasPrice: GasPrice.fromString(\'0.025untrn\'),\n    },\n);\nconst factoryContractClient = new DropFactory.Client(\n    client,\n    "neutron15lp29w5vtntsgecwxp5qx0m7tka6km885pcls4e4ule6yz6dhvqstukrvu",\n);\nconst res = await factoryContractClient.queryState();\nconsole.log(res);\n')),(0,r.kt)("h3",{id:"dasset-denom"},"dASSET denom"),(0,r.kt)("p",null,"The denom is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"token")," contract's config which can be obtained with the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "config": {}\n}\n')),(0,r.kt)("p",null,"Query result example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "core_address": "neutron1elxhch2kul3qk2whxawtfwe0l2ma0snec3fe6j4zp2wftwrhs33q2yzqwy",\n  "denom": "factory/neutron1wgtjgeprg53wthczzlzpg0vrytuvfl9j59lpf87qd3mtj2dq6xysxvwcxd/drop"\n}\n')),(0,r.kt)("h3",{id:"dasset-balance"},"dASSET balance"),(0,r.kt)("p",null,"Since dASSET is a native denom, you can get the dASSET balance by querying the bank module."),(0,r.kt)("h3",{id:"exchange-rate"},"Exchange rate"),(0,r.kt)("p",null,"Exchange rate tells how many ASSET tokens correspond to single dASSET token. Thus, while Drop protocol auto-compounds staking rewards, this number is growing with time (it can possibly decrease because of slashing events)."),(0,r.kt)("p",null,"Exchange rate is queried from the ",(0,r.kt)("inlineCode",{parentName:"p"},"core")," contract with the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "exchange_rate": {}\n}\n')),(0,r.kt)("p",null,"The output is a float number represented as a ",(0,r.kt)("strong",{parentName:"p"},"string"),"."),(0,r.kt)("p",null,"Example of using the client code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const exchangeRate = parseFloat(\n    await coreContractClient.queryExchangeRate(),\n);\n")),(0,r.kt)("h3",{id:"withdrawal-nft-info"},"Withdrawal NFT info"),(0,r.kt)("p",null,"Withdrawal NFT represents the promise to return the user ASSET tokens once unbonding period is over.\nThe user receives an NFT once they provide dASSET to unstake."),(0,r.kt)("p",null,"Here's the example on how to get the withdrawal NFT info from via generated client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const vouchers = await withdrawalVoucherContractClient.queryTokens({\n    owner: neutronUserAddress,\n});\n")),(0,r.kt)("h2",{id:"actions"},"Actions"),(0,r.kt)("p",null,"Any action is represented as exchanging one token for another:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Staking is an exchange of ASSET for dASSET."),(0,r.kt)("li",{parentName:"ul"},"Unstaking request is an exchange of dASSET for withdrawal NFT."),(0,r.kt)("li",{parentName:"ul"},"Unstaking withdrawal is an exchange of withdrawal NFT for ASSET.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NB: there is a planned plug in integration which will allow to skip the withdrawal step.\nThe idea behind it that the user can provide an additional gas token and lock their withdrawal NFT in the special contract that will process the withdrawal for them automatically.\nSo in the future it will be possible to unstake without the need to withdraw assets manually.")),(0,r.kt)("h3",{id:"staking"},"Staking"),(0,r.kt)("p",null,"Staking with Drop is done by the following message to the ",(0,r.kt)("inlineCode",{parentName:"p"},"core")," contract ",(0,r.kt)("strong",{parentName:"p"},"with assets to stake attached"),", it is possible to omit ",(0,r.kt)("inlineCode",{parentName:"p"},"receiver")," field, in this case sender's address will be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "bond": {\n    "receiver": "neutron1receiveraddress"\n  }\n}\n')),(0,r.kt)("p",null,"For specifying the staking referral see ",(0,r.kt)("a",{parentName:"p",href:"integrations/referral"},"Referral program integration")),(0,r.kt)("p",null,"Example of using the TS client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const bondTxResult = await coreContractClient.bond(\n    neutronUserAddress,\n    {},\n    1.6,\n    undefined,\n    [\n        {\n            amount: '500000',\n            denom: neutronIBCDenom,\n        },\n    ],\n);\n")),(0,r.kt)("h3",{id:"unstaking-request"},"Unstaking request"),(0,r.kt)("p",null,"To make an unstaking request, user should send the dASSET to the core contract with the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "unbond": {}\n}\n')),(0,r.kt)("p",null,"Example of using the TS client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'let unBondTxResult = await coreContractClient.unbond(\n    neutronUserAddress,\n    1.6,\n    undefined,\n    [\n        {\n            amount: Math.floor(200_000 / exchangeRate).toString(),\n            denom: "token_factory_denom",\n        },\n    ],\n);\n')),(0,r.kt)("p",null,"After that, user receives a withdrawal voucher that they can use to withdraw their coins after the unbonding period."),(0,r.kt)("h3",{id:"withdrawal"},"Withdrawal"),(0,r.kt)("p",null,"Withdrawal of the ASSET implies sending the NFT to ",(0,r.kt)("inlineCode",{parentName:"p"},"withdrawal_manager")," with the following message attached:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "withdraw": {}\n}\n')),(0,r.kt)("p",null,"Example of using the TS client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const voucherWithdrawTxResult = await voucherContractClient.sendNft(neutronUserAddress,\n    {\n        token_id: tokenId,\n        contract: withdrawalManagerContractAddress,\n        msg: Buffer.from(\n            JSON.stringify({\n                withdraw: {},\n            }),\n        ).toString('base64'),\n    });\n")))}d.isMDXComponent=!0}}]);